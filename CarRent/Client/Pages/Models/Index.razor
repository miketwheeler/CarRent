@page "/models/"

@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]


<HeadingComponent Text="Models" />
<br />

<a href="/models/create" class="btn btn-secondary">
    Create New Model    
    <span class="oi oi-plus"></span>
</a>
<br />
<br />

@if(Models == null)
{
    <div class=""alert alert-info">Loading ...</div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var model in Models)
            {
                <tr>
                    <td>@model.Name</td>
                    <td>
                        <a href="/models/view/@model.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/models/edit/@model.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(model.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Model> Models;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Models = await _client.GetFromJsonAsync<List<Model>>($"{Endpoints.ModelsEndpoint}");
    }

    async Task Delete(int modelId)
    {
        var model = Models.First(q => q.Id == modelId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {model.Name}?");
        if(confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ModelsEndpoint}/{modelId}");
            await OnInitializedAsync();    
        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}