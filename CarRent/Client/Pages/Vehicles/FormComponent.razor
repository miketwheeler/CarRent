@inject HttpClient _client

<EditForm Model="@vehicle" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <fieldset disabled="@Disabled">
        @if(Disabled)
        {        
            <div class="form-group">
                <label>Image (Optional): </label>
                <div>
                    <img src="@vehicle.ImageName" class="img-thumbnail" style="width: 150px; height: 150px" />
                </div>
            </div>
        }
        else
        {
            <div class="form-group">
                <label>Image (Optional): </label>
                <div>
                    <InputFile OnChange="HandleFileSelection" />
                    <p class="text-danger">@UploadFileWarning</p>
                </div>
            </div>
        }
    
        <div class="form-group">
            <label>Make: </label>
            <div>
                <InputSelect @bind-Value="vehicle.MakeId" class="form-control">
                    <option value=""> -- Select Make --</option>
                    @if(Makes != null)
                    {
                        foreach(var make in Makes)
                        {
                            <option value="@make.Id">@make.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => vehicle.MakeId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Model: </label>
            <div>
                <select @bind="vehicle.ModelId" class="form-control">
                    <option value=""> -- Select Model --</option>
                    @if(Models != null)
                    {
                        foreach(var model in Models)
                        {
                            <option value="@model.Id">@model.Name</option>
                        }
                    }
                </select>
                <ValidationMessage For="@(() => vehicle.ModelId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Color: </label>
            <div>
                <select @bind="vehicle.ColorId" class="form-control">
                    <option value=""> -- Select Color --</option>
                    @if(Colors != null)
                    {
                        foreach(var color in Colors)
                        {
                            <option value="@color.Id">@color.Name</option>
                        }
                    }
                </select>
                <ValidationMessage For="@(() => vehicle.ColorId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Year: </label>
            <div>
                <InputNumber @bind-Value="@vehicle.Year" class="form-control"/>
                <ValidationMessage For="@(() => vehicle.Year)" />
            </div>
        </div>
        <div class="form-group">
            <label>License Plate Number: </label>
            <div>
                <InputText @bind-Value="@vehicle.LicensePlateNumber" class="form-control"/>
                <ValidationMessage For="@(() => vehicle.LicensePlateNumber)" />
            </div>
        </div>
        <div class="form-group">
            <label>Vehicle Identification Number: </label>
            <div>
                <InputText @bind-Value="@vehicle.Vin" class="form-control" />
                <ValidationMessage For="@(() => vehicle.Vin)" />
            </div>
        </div>
        <div class="form-group">
            <label>Daily Rate: </label>
            <div>
                <InputNumber @bind-Value="@vehicle.RentalRate" class="form-control" />
                <ValidationMessage For="@(() => vehicle.RentalRate)" />
            </div>
        </div>
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-black">
            @ButtonText
        </button>
    }

    <BackToList Target="vehicles" />
</EditForm>

@code {
    private IList<Make> Makes;
    private IList<Model> Models;
    private IList<Color> Colors;
    string UploadFileWarning;

    protected async override Task OnInitializedAsync()
    {
        Models = await _client.GetFromJsonAsync<List<Model>>(Endpoints.ModelsEndpoint);
        Colors = await _client.GetFromJsonAsync<List<Color>>(Endpoints.ColorsEndpoint);
        Makes = await _client.GetFromJsonAsync<List<Make>>($"{Endpoints.MakesEndpoint}");
    }

    private async void HandleFileSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if(file != null)
        {
            var ext = System.IO.Path.GetExtension(file.Name);
            if(ext.ToLower().Contains("jpg")
                || ext.ToLower().Contains("png")
                || ext.ToLower().Contains("jpeg"))
            {
                var picId  = Guid.NewGuid().ToString().Replace("-", "");
                vehicle.ImageName = $"{picId}{ext}";
                vehicle.Image = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(vehicle.Image);
                UploadFileWarning = string.Empty;
            }
            else
            {
                UploadFileWarning = "Please select a valid Image File (.jpg, .png or .jpeg)";
            }
        }
    }
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Vehicle vehicle { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
}
